2nd october
what we do today?

first In PROTECT_ROUTE me Flag lekr krre the but ab hum security ke krege means JWT
PREV CODE: PROTECT_ROUTE
function protectRoute(req, res, next) {
  //it is used for authentication if we do multiple time login
  console.log("protectRoute reached");

  let isAllowed = false; //1) here we pass the jwt
  if (isAllowed) {
    //2) verify everytime that if bringing the token to get your response
    next();
  } else {
    res.send("kindly login to access this resource");
  }
}

#when we do login we send the cookie just prior to the status code and it also takes token with it.

    LOGIN FUNCTION: 

1) to implement cookies -> npm install cookie-parser 
2) app.use(cookie-Parser())-> agar humko koi cookie bhjni hai toh  usually we send the cookies along with the token  when we doing login.
3)res.cookie(1st param is cookie name, 2nd param is token)
res.cookie('login', '1234', { httpOnly: true }); -> authRouter login function(jb login kra to cookie bhjdi)
4) Before cookie we the send the JWT token also ie 
    let token = jwt.sign({ email: obj.email }, JWT_SECRET); //1st param is payload(email -> yeh hum khud kuch bhi lik skte hai :email jidr se nikali h vo), 2nd parm is the SECRET KEY Which we make
5) and we verify the token in the protect PROTECT_ROUTE

update::

function loginUser(req, res) {
  let { email, password } = req.body;
  let obj = content.find(function (obj) {
    //1) Database pr loop lgaya or search kra id ko
    return (obj.email = email); //rhs is email which is send through the frontend
  });
  if (obj.password == password) {
    
    let token = jwt.sign({ email: obj.email }, JWT_SECRET); //1st param is payload(email -> yeh hum khud kuch bhi lik skte hai :email jidr se nikali h vo), 2nd parm is the SECRET KEY Which we make
    console.log('tokenId',token);
    res.cookie("JWT", token, { httpOnly: true });   //1ST PARAM is Cookie Name(khud se kuch bhi rakho) , 2nd param is(token)
    res.status(200).json({
      message: "user logged In",
      user: obj,
    });
  } else {
    res.status(402).json({
      message: "kindly go on the login function",
    });
  }
}


function protectRoute(req, res, next) {
  //token verify hum idr se krte hai or login se hum bhjte hai
  //it is used for authentication if we do multiple time login
  console.log("protectRoute reached");
  console.log("cookies", req.cookies); //cookieparser

  let decryptedToken = jwt.verify(req.cookies.JWT, JWT_SECRET); //req.cookies.JWT -> JWTis the cookie name jo request me thi AND 2nd argument is the secret code
  console.log("decryptedToken", decryptedToken);

  //2) verify everytime that if bringing the token to get your response
  if (decryptedToken) {
    next();
  } else {
    res.send("kindly login to access this resource");
  }
}

==================================================================
# MONGO DB: TO connect the mongodb we communicate this through the MONGOOSE..

#REST API: how to write API.
2) Whatever we are writing means routes that are called API and What the route will be before the route we will add /api (eg: /api/auth)

RULES FOR REST API
1) The name of the route will starts from the NOUN. eg 
/user
/booking
/review   we should make the different collection for all these.

NOTE: In mongoose we put the data in Models and make schema and model to store the data n the mongodb

eg: Whatever work we will do now, we will do it through the user.  eg make schema and model  -> to store the data in mongodb

//user model.js

prev signup user code

function signupUser(req, res) {
  let { name, email, password, confirmPassword } = req.body;
  if (password == confirmPassword) {
    let newUser = { name, email, password };
    content.push(newUser); //1st put entry

    fs.writeFileSync("./data.json", JSON.stringify(content)); //2nd save in dataStorage
    res.status(200).json({
      createdUser: newUser,
    });
  } else {
    res.status(201).json({
      message: "password or confirmPassword are not match",
    });
  }
}

update signup user
async function signupUser(req, res) {
  try {
    let newUser = await userModel.create(req.body);  //create is used to entries in the document
    res.status(200).json({
      message: "user created successfully",
      user: newUser
    })
  } catch (err) {
    res.status(500).json({
      message: "error"
    })
  }
}




==================================================================================================
CODES WHOLE:->
APP1.JS___

//npm init -y
const express = require("express");
let fs = require("fs");
const jwt = require("jsonwebtoken");
const cookieParser = require("cookie-parser");
const userModel = require('./model/userModel');
const { JWT_SECRET } = require("./secret");

const app = express();

let content = JSON.parse(fs.readFileSync("./data.json"));
//crud functions

app.use(express.static("Frontend_Folder"));
app.use(express.json());
app.use(cookieParser()); //from this we send cookie to anyone (cookie ie token)

// Make routes in particular folder
const userRouter = express.Router();
const authRouter = express.Router();

app.use("/api/user", userRouter);
app.use("/api/auth", authRouter);

// userRouter.route("/user").post(bodyChecker, createUser); //bodyChecker is the middle ware -> toh uske aagla chljaega function && we send middleware next or jo next hoga toh uske next chljaega
userRouter.route("/").get(protectRoute, getUsers);

// userRouter
//     .route('/:id')  //localhost:8082/user/10 -> post
//     .get(getUser)

authRouter.route("/signup").post(bodyChecker, signupUser);
authRouter.route("/login").post(bodyChecker, loginUser);

function bodyChecker(req, res, next) {
  console.log("body checker reached");
  let isPresent = Object.keys(req.body).length; //means check anything is present in body
  console.log("ispresent", isPresent);
  if (isPresent) {
    //if the length is 1 ie true then this will execute
    next();
  } else {
    res.json({
      message: "kindly send the details in the body",
    });
  }
}

function protectRoute(req, res, next) {
  console.log("protectRoute reached");
  console.log("cookies", req.cookies); //cookieparser

  //token verify -> do this when we do the reqest multiple times
  let decryptedToken = jwt.verify(req.cookies.JWT, JWT_SECRET); //req.cookies.JWT -> JWTis the cookie name jo request me thi AND 2nd argument is the secret code
  console.log("decryptedToken", decryptedToken);

  //2) verify everytime that if bringing the token to get your response
  if (decryptedToken) {
    next();
  } else {
    res.send("kindly login to access this resource");
  }
}

async function signupUser(req, res) {
  try {
    let newUser = await userModel.create(req.body);  //create is used to entries in the document
    res.status(200).json({
      message: "user created successfully",
      user: newUser
    })
  } catch (err) {
    res.status(500).json({
      message: "error"
    })
  }
}

function loginUser(req, res) {
  try {
    let { email, password } = req.body;
    let obj = content.find(function (obj) {
      //1) Database pr loop lgaya or search kra id ko
      return (obj.email = email); //rhs is email which is send through the frontend
    });
    if (obj.password == password) {
      let token = jwt.sign({ email: obj.email }, JWT_SECRET); //1st param is payload(email -> yeh hum khud kuch bhi lik skte hai :email jidr se nikali h vo), 2nd parm is the SECRET KEY Which we make
      console.log("tokenId", token);
      res.cookie("JWT", token, { httpOnly: true }); //1ST PARAM is Cookie Name(khud se kuch bhi rakho) , 2nd param is(token)
      res.status(200).json({
        message: "user logged In",
        user: obj,
      });
    } else {
      res.status(402).json({
        message: "kindly go on the login function",
      });
    }
  } catch (err) {
    res.json({
      message: "Kindly do signup first",
    });
  }
}

function createUser(req, res) {
  console.log("users");
  let body = req.body; //the body that can be store in which we had added
  console.log(body);
  content.push(req.body); //jo bhi body me aaya vo push kr diya
  //put data in data storage
  fs.writeFileSync("./data.json", JSON.stringify(content));
  res.json({
    message: content,
  });
}

function getUsers(req, res) {
  //It will give the details of all users
  res.status(200).json({
    message: content,
  });
}

// function getUser(req, res) {
//   res.send({
//     message: content,
//   });
// }

app.listen(8082, function () {
  console.log("server is started");
});

app.use(function (req, res) {
  res.sendFile("./Frontend_Folder/404.html", { root: __dirname }); //dirname has 2 underscore
});

// NEXT in Middleware =================================
// app.post('/', function (req, res, next) {
//     let body = req.body;
//     console.log('inside first post', body);
//     next();
// })
// app.use(function (req, res, next) {
//     console.log('inside app.use');
//     next();
// })

// app.get('/', function (req, res, next) {
//     console.log('inside get');
// })

// app.post('/', function (req, res, next) {
//     let body = req.body;
//     console.log('inside first post', body);
//     res.send('tested next')
// })
// ========================

// CRUD OPERATIONS:===============================

//2) Post -> for post -> hm add krege 1st app.use(express.json())
// app.use("/", function (req, res, next) {
//     let body = req.body;
//     console.log("before", body);
//     next();
//   });

// app.use(express.json());

//   app.post("/", function (req, res) {
//     let body = req.body;
//     console.log("after", body);
//     res.status(200).json({
//       message: body,
//     });
//   });

//   // 1) read
//   app.get("/", function (req, res) {
//     console.log("hello from backend");
//     //    res.send( '<h1>Hello from backend </h1>')
//     res.status(200).json({
//       message: content,
//     });
//   });

//   //3) update-> post req -> it add parameter
//   app.put("/", function (req, res) {
//     console.log("hello from homepage");
//     res.send("<h1>Helloe from home Page</h1>");
//   });

//   // 4)Delete
//   app.delete("/", function (req, res) {
//     console.log("hello from homepage");
//     res.send("<h1>Helloe from home Page</h1>");
//   });


================================================================
USERMODAL.JS____

const mongoose = require("mongoose");
const { DB_PASSWORD } = require('../secret');
const validator = require("email-validator");

let db_link =
    `mongodb+srv://admin:${DB_PASSWORD}@cluster0.eeqwe.mongodb.net/myFirstDatabase?retryWrites=true&w=majority`

mongoose.connect(db_link).then(function (connection) {
    console.log('Database is connected');
}).catch(function (err) {
    console.log('err',err);
})

const userSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true,
        unique: true,
        validate: function () {
            //3rd party library: npm package
            return validator.validate(this.email);  //this.email means issi schema ki email
        }
    },
    password: {
        type: String,
        required: true,
        minlength: 8,
    },
    confirmPassword: {
        type: String,
        required: true,
        min: 8,
        validate: function () {
            this.password = this.confirmPassword
        }
    },
    createdAt: {
        type:String
    }
})

//2nd make model from userschema
const userModel = mongoose.model("userModel", userSchema);

//to use this we export this module
module.exports = userModel;

then change to upate because we have to store in the database



===================================
# MVC Architure -> It is nothing just a structure that how to write code
