3rd October

QUERIES :- in the url, the query starts just after the question mark

1)Hooks : -> pre hooks -> means in yesterday when we were doing signup, the confirm password was stored in the database that we dont want to. so we use hooks ie pre hooks
//hooks -> pre cook , save is the event listner , we can delete update as well
userSchema.pre('save', function () {
    this.confirmPassword = undefined;
})

==========

2) MVC Architecture: means reArranging the code, create router folder and put from the express.router till the routes in different folder


==========

3) async function signupUser(req, res) {
  try {
    let newUser = await userModel.create(req.body); //create is used to entries in the document
    res.status(200).json({
      message: "user created successfully",
      user: newUser,
    });
  } catch (err) {
    console.log(err);
    res.status(500).json({
      message: err.message,
    });
  }
}

async function loginUser(req, res) {
  try {
    let { email, password } = req.body; //email password aaya body me and then check kra usermodel ie database me ki hai ya nahi using findOne
    let user = await userModel.findOne({ email });
    if (user) {
      if (user.password == password) {
        let token = jwt.sign({ id: user["_id"] }, JWT_SECRET);
        console.log("token:", token);
        res.cookie("JWT", token, { httpOnly: true });
        res.status(200).json({
          message: "user logged In successfully",
        });
      } else {
        res.status(404).json({
          message: "email or password is incorrect",
        });
      }
    } else {
      res.status(400).json({
        message: "email or password is incorrect",
      });
    }
  } catch (err) {
    console.log(err);
    res.status(500).json({
      message: err.message,
    });
  }
}

====================

4) FORGET AND RESET PASSWORD 
async function forgetPassword(req, res) {
    try {
        let { email } = req.body;
        let user = await userModel.findOne({ email });  //1st search the email on the database
        if (user) {
            let token = (Math.floor(Math.random() * 10000) + 10000).toString().substring(1); //2nd  create token otp based
            let updateRes = await userModel.updateOne({ email }, { token });  //3rd update the database with the new token  
            // console.log("updated Value", updateRes);  //update one hume actual value nahi deta so ispr hme 1 hor query lgani hoti hai ie findOne
        
            let newUser = await userModel.findOne({ email });
             console.log("newUser", newUser);

            //4 step is to send the mail on the user
            await emailSender(token, user.email);  //idr 2 param pass krege ik token jo bhjna hai and other is usrki email so  email sender me yeh 2 pass krege

            res.status(200).json({
                message: "user Token send to your email",
                user: newUser,
                token
            })
        } else {
            res.status(400).json({
                message:"email or password is incorrect"
            })
        }

    } catch (err) {
        console.log(err);
        res.status(500).json({
            message: err.message
        })
    }
}

RESET PASSWORD CODE:

async function resetPassword(req, res) {
  try {
    let { token, password, confirmPassword } = req.body;
    let user = await userModel.findOne({ token }); //user nikala adn token ke basis pr search kra database me
    console.log("user", user);
    if (user) {
      //update in the database that user
    //   await userModel.updateOne( { token }, {
    //       token: undefined,
    //       password: password,
    //       confirmPassword: confirmPassword,
    //   }, { runValidators: true }//token database me bhi store hora tha means email validator kam nahi kra : update one jo hai uspr validator work nahi krte
    //   );

        // user.password = password;
        // user.confirmPassword = confirmPassword;
        // user.token = undefined;   //yeh jo krre the use this by METHODS: 
        
        //ALTERNATE WAY
        
        user.resetHandler(password, confirmPassword);
        await user.save();

      let newUser = await userModel.findOne({ email: user.email });

      res.status(200).json({
        message: "user token send to your email",
        user: newUser,
        token,
      });
    } else {
      res.status(404).json({
        message: "token is incorrect",
      });
    }
  } catch (err) {
    console.log(err);
    res.status(500).json({
      message: err.message,
    });
  }
}



//WHOLE CODE TILL NOW:-----------------------------------------
1) AUTH ROUTER CODE:

const express = require("express");
const { bodyChecker } = require("./utilFns");
const jwt = require("jsonwebtoken");
const userModel = require("../model/userModel");
const { JWT_SECRET } = require("../secret");
const emailSender = require("../helpers/emailSender");

const authRouter = express.Router();

authRouter.route("/signup").post(bodyChecker, signupUser);
authRouter.route("/login").post(bodyChecker, loginUser);
authRouter.route("/forgetPassword").post(bodyChecker, forgetPassword);
authRouter.route("/resetPassword").post(bodyChecker, resetPassword);

async function signupUser(req, res) {
  try {
    let newUser = await userModel.create(req.body); //create is used to entries in the document
    res.status(200).json({
      message: "user created successfully",
      user: newUser,
    });
  } catch (err) {
    console.log(err);
    res.status(500).json({
      message: err.message,
    });
  }
}

async function loginUser(req, res) {
  try {
    let { email, password } = req.body; //email password aaya body me and then check kra usermodel ie database me ki hai ya nahi using findOne
    let user = await userModel.findOne({ email });
    if (user) {
      if (user.password == password) {
        let token = jwt.sign({ id: user["_id"] }, JWT_SECRET);
        console.log("token:", token);
        res.cookie("JWT", token, { httpOnly: true });
        res.status(200).json({
          message: "user logged In successfully",
        });
      } else {
        res.status(404).json({
          message: "email or password is incorrect",
        });
      }
    } else {
      res.status(400).json({
        message: "email or password is incorrect",
      });
    }
  } catch (err) {
    console.log(err);
    res.status(500).json({
      message: err.message,
    });
  }
}

async function forgetPassword(req, res) {
  try {
    let { email } = req.body;
    let user = await userModel.findOne({ email }); //1st search the email on the database
    if (user) {
      let token = (Math.floor(Math.random() * 10000) + 10000)
        .toString()
        .substring(1); //2nd  create token otp based
      let updateRes = await userModel.updateOne({ email }, { token }); //3rd update the database with the new token
      // console.log("updated Value", updateRes);

      let newUser = await userModel.findOne({ email });
      console.log("newUser", newUser);

      //4 step is to send the mail on the user
      await emailSender(token, user.email);

      res.status(200).json({
        message: "user Token send to your email",
        user: newUser,
        token,
      });
    } else {
      res.status(400).json({
        message: "email or password is incorrect",
      });
    }
  } catch (err) {
    console.log(err);
    res.status(500).json({
      message: err.message,
    });
  }
}

async function resetPassword(req, res) {
  try {
    let { token, password, confirmPassword } = req.body;
    let user = await userModel.findOne({ token }); //user nikala adn token ke basis pr search kra database me
    console.log("user", user);
    if (user) {
      // user.password = password;
      // user.confirmPassword = confirmPassword;
      // user.token = undefined;   //yeh jo krre the use this by METHODS:

      //ALTERNATE WAY

      user.resetHandler(password, confirmPassword);
      await user.save();

      let newUser = await userModel.findOne({ email: user.email });

      res.status(200).json({
        message: "user token send to your email",
        user: newUser,
        token,
      });
    } else {
      res.status(404).json({
        message: "token is incorrect",
      });
    }
  } catch (err) {
    console.log(err);
    res.status(500).json({
      message: err.message,
    });
  }
}

// function tempLoginUser(req, res) {
//     try {
//       let { email, password } = req.body;
//       let obj = content.find(function (obj) {
//         //1) Database pr loop lgaya or search kra id ko
//         return (obj.email = email); //rhs is email which is send through the frontend
//       });
//       if (obj.password == password) {
//         let token = jwt.sign({ email: obj.email }, JWT_SECRET); //1st param is payload(email -> yeh hum khud kuch bhi lik skte hai :email jidr se nikali h vo), 2nd parm is the SECRET KEY Which we make
//         console.log("tokenId", token);
//         res.cookie("JWT", token, { httpOnly: true }); //1ST PARAM is Cookie Name(khud se kuch bhi rakho) , 2nd param is(token)
//         res.status(200).json({
//           message: "user logged In",
//           user: obj,
//         });
//       } else {
//         res.status(402).json({
//           message: "kindly go on the login function",
//         });
//       }
//     } catch (err) {
//       res.json({
//         message: "Kindly do signup first",
//       });
//     }
//   }

module.exports = authRouter;

----------------------------------
2)  UserModel -------------

const mongoose = require("mongoose");
const { DB_PASSWORD } = require("../secret");
const validator = require("email-validator");

let db_link = `mongodb+srv://admin:${DB_PASSWORD}@cluster0.eeqwe.mongodb.net/myFirstDatabase?retryWrites=true&w=majority`;

mongoose
  .connect(db_link)
  .then(function (connection) {
    console.log("Database is connected");
  })
  .catch(function (err) {
    console.log("err", err);
  });

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
    validate: function () {
      //3rd party library: npm package
      return validator.validate(this.email); //this.email means issi schema ki email
    },
  },
  password: {
    type: String,
    required: true,
    minlength: 8,
  },
  confirmPassword: {
    type: String,
    required: true,
    min: 8,
    validate: function () {
      this.password = this.confirmPassword;
    },
  },
  token: String,
  createdAt: {
    type: String,
  },
});

//hooks -> pre cook , save is the event listner , we can delete update as well
userSchema.pre("save", function (next) {
  this.confirmPassword = undefined;
  next();
});
//METHODS:  use RESET HANDLER CODE
userSchema.methods.resetHandler = function (password, confirmPassword) {
  this.password = password;
  this.confirmPassword = confirmPassword;
  this.token = undefined;
};

//2nd make model from userschema
const userModel = mongoose.model("userModel", userSchema);

//to use this we export this module
module.exports = userModel;

=============================

3)user Router code:

const express = require("express");
const userModel = require("../model/userModel");
const { protectRoute } = require('./utilFns');

// Make routes in particular folder
const userRouter = express.Router();

userRouter.route("/").get(protectRoute, getUsers);

async function getUsers(req, res) {
  //It will give the details of all users
    try {
        let users = await userModel.find();   //find -> it gives the detail of all the users
        res.status(200).json({
            message: users
        })
  } catch (err) {
    console.log(
      "error to get details of user!! please verify your email first"
    );
    res.status(500).json({
      message: " please verify your email first",
    });
  }
}

module.exports = userRouter;
=====================================

4)utilFns code: 

const jwt = require("jsonwebtoken");
const { JWT_SECRET } = require('../secret');

module.exports.bodyChecker = function bodyChecker(req, res, next) {
    console.log("body checker reached");
    let isPresent = Object.keys(req.body).length; //means check anything is present in body
    console.log("ispresent", isPresent);
    if (isPresent) {
      //if the length is 1 ie true then this will execute
      next();
    } else {
      res.json({
        message: "kindly send the details in the body",
      });
    }
}

module.exports.protectRoute =  function protectRoute(req, res, next) {
    console.log("protectRoute reached");
    console.log("cookies", req.cookies); //cookieparser
  
    //token verify -> do this when we do the reqest multiple times
    let decryptedToken = jwt.verify(req.cookies.JWT, JWT_SECRET); //req.cookies.JWT -> JWTis the cookie name jo request me thi AND 2nd argument is the secret code
    console.log("decryptedToken", decryptedToken);
  
    //2) verify everytime that if bringing the token to get your response
    if (decryptedToken) {
      next();
    } else {
      res.send("kindly login to access this resource");
    }
}
  
  
  
//NOTE: module.exports.filename that we want to create

=======================================================
5) app1.js

//npm init -y
const express = require("express");
let fs = require("fs");
const userRouter = require('./Routers/userRouter');
const authRouter = require('./Routers/authRouter');
const cookieParser = require("cookie-parser");


const app = express();

// let content = JSON.parse(fs.readFileSync("./data.json"));
//crud functions

app.use(express.static("Frontend_Folder"));
app.use(express.json());
app.use(cookieParser()); //from this we send cookie to anyone (cookie ie token)


app.use("/api/user", userRouter);
app.use("/api/auth", authRouter);


app.listen(8082, function () {
  console.log("server is started");
});

app.use(function (req, res) {
  res.sendFile("./Frontend_Folder/404.html", { root: __dirname }); //dirname has 2 underscore
});

